package test;

import core.Coord;
import core.Settings;
import movement.MovementModel;
import movement.Path;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static junit.framework.Assert.assertTrue;
import static org.junit.Assert.assertNotNull;

/**
 * This class takes care of some common setup issues for all MovementModels.
 * It includes tests which are applicable to all MovementModels.
 * Created by Melanie Bruns on 24.02.17.
 */


public abstract class AbstractMovementModelTest {

    protected MovementModel model;
    protected TestSettings testSettings;
    protected static final int MAX_COORD_X = 1000;
    protected static final int MAX_COORD_Y = 1000;
    protected static final int TEST_RUNS = 2000;
    protected static final String PATH_OUTSIDE_SIMULATION = "Path was outside the simulation area, ";
    protected static final String MESSAGE_X_BELOW_ZERO = PATH_OUTSIDE_SIMULATION +
                                                        "X coordinate was below zero.";
    protected static final String MESSAGE_Y_BELOW_ZERO = PATH_OUTSIDE_SIMULATION +
                                                        "Y coordinate was below zero.";
    protected static  final String MESSAGE_X_ABOVE_LIMIT = PATH_OUTSIDE_SIMULATION +
                                                            "X coordinate above limit.";
    protected static  final String MESSAGE_Y_ABOVE_LIMIT = PATH_OUTSIDE_SIMULATION +
                                                             "Y coordinate above limit.";
    @Before
    /**
     * Initializes the settings and the model
     * Needs {@link #initializeModel(TestSettings)}.
     */
    public void setUp(){
        Settings.init(null);
        testSettings = new TestSettings();
        model = initializeModel(testSettings);
        //Gets the initial location as it is necessary for getPath
        model.getInitialLocation();
    }

    /**
     * Initialize an instance of a concrete subclass of the MovementModel
     * @param testSettings Initialized testSettings
     * @return An initialized concrete MovementModel
     */
    public abstract MovementModel initializeModel(TestSettings testSettings);

    /**
     * Tests whether the MovementModel can generate a path, which includes a next
     * waypoint coordinate
     */
    @Test
    public void testGetPath(){
        Path path = model.getPath();
        assertNotNull("No path was generated by the movement model", path);
        List<Coord> coords = path.getCoords();
        //Get the first point on the path
        Coord nextWaypoint = coords.get(1);
        assertNotNull("Path did not contain a next waypoint", nextWaypoint);
    }

    /**
     * Tests if path generated by the MovementModel stay within the bounds
     * of the simulation area with the next step
     */
    @Test
    public void testStaysWithinDefaultBounds(){
        for (int i=1; i<TEST_RUNS; i++){
            Path p = model.getPath();
            List<Coord> coords = p.getCoords();
            //check if a next waypoint exists, it may be, that path to the current position is generated
            //and only includes one waypoint
            if (coords.size() > 1) {
                Coord nextWaypoint = coords.get(1);
                assertNotNull("Path did not contain a next waypoint", nextWaypoint);
                //Bounds in test Settings are 10000x8000
                assertTrue(MESSAGE_X_BELOW_ZERO, nextWaypoint.getX() >= 0);
                assertTrue(MESSAGE_Y_BELOW_ZERO, nextWaypoint.getY() >= 0);
                assertTrue(MESSAGE_X_ABOVE_LIMIT, nextWaypoint.getX() <= model.getMaxX());
                assertTrue(MESSAGE_Y_ABOVE_LIMIT, nextWaypoint.getY() <= model.getMaxY());
            }
        }
    }
}
